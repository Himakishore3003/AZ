name: Deploy Weather App to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Required permissions for OIDC authentication
permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: '3.11'
  AZURE_WEBAPP_NAME: 'weasky'
  AZURE_OBJECT_ID: 'c26c6588-90cc-4890-a0c2-55a3f8ec06b0'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Create and activate virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        echo "$GITHUB_WORKSPACE/venv/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        # Create a clean directory for deployment
        mkdir -p deployment_package
        
        # Copy application files (exclude virtual environment and unnecessary files)
        cp -r . deployment_package/
        rm -rf deployment_package/venv
        rm -rf deployment_package/.git
        rm -rf deployment_package/.github
        rm -rf deployment_package/__pycache__
        find deployment_package -name "*.pyc" -delete
        rm -f deployment_package/.env
        rm -f deployment_package/README.md
        
        # Create zip for deployment
        cd deployment_package
        zip -r ../weather-app-deployment.zip . -x "*.git*" "*__pycache__*" "*.pyc" ".env"
    
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: weather-app
        path: weather-app-deployment.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: weather-app
    
    - name: Unzip artifact for deployment
      run: |
        unzip weather-app-deployment.zip
        ls -la
    
    # Method 1: Try OIDC with corrected federated identity setup
    - name: Azure Login (OIDC Method)
      id: azure-login-oidc
      uses: azure/login@v2
      continue-on-error: true
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    # Method 2: Fallback to Service Principal if OIDC fails
    - name: Azure Login (Service Principal Method)
      if: steps.azure-login-oidc.outcome == 'failure'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Method 3: Final fallback using existing secrets (if above methods fail)
    - name: Azure Login (Existing Secrets Method)
      if: steps.azure-login-oidc.outcome == 'failure' && !secrets.AZURE_CREDENTIALS
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_9B69CACF6A6744F4BDFB8670DA846F37 }}
        tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_3D95B2A12EEF48A093EB85B74D780347 }}
        subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_9DCCD7F9CF4A4A598B6D0FDE59B6808D }}
    
    # Verify login and get context
    - name: Verify Azure Login
      run: |
        echo "Current Azure context:"
        az account show
        echo "Available resource groups:"
        az group list --output table || echo "Cannot list resource groups"
    
    # Configure App Service settings with error handling
    - name: Configure App Service settings
      run: |
        echo "Configuring app settings for ${{ env.AZURE_WEBAPP_NAME }}"
        
        # Try to get the resource group automatically
        RESOURCE_GROUP=$(az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --query resourceGroup -o tsv 2>/dev/null || echo "")
        
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Could not auto-detect resource group, trying from secrets..."
          RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        fi
        
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "No resource group found, skipping app settings configuration"
        else
          echo "Using resource group: $RESOURCE_GROUP"
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group "$RESOURCE_GROUP" \
            --settings \
              OPENWEATHER_API_KEY="${{ secrets.OPENWEATHER_API_KEY }}" \
              FLASK_ENV="production" \
              FLASK_APP="app.py" \
              SCM_DO_BUILD_DURING_DEPLOYMENT="true" \
              ENABLE_ORYX_BUILD="true" \
              PYTHON_VERSION="${{ env.PYTHON_VERSION }}" \
              WEBSITE_RUN_FROM_PACKAGE="1" || echo "Failed to configure app settings, continuing with deployment"
        fi
      continue-on-error: true
    
    # Deploy to Azure Web App
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      id: deploy-to-webapp
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'Production'
        package: '.'
        type: 'zip'
    
    # Post-deployment verification
    - name: Post-deployment verification
      run: |
        echo "Deployment completed. App URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        
        # Optional: Test if the app is responding
        sleep 30  # Wait for app to start
        curl -f "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" || echo "App might still be starting up"
      continue-on-error: true
    
    - name: Logout from Azure
      run: |
        az logout
        echo "Successfully logged out from Azure"
      if: always()
